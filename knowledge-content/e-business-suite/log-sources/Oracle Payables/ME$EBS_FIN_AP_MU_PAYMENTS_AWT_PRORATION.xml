<?xml version="1.0" encoding="UTF-8"?>
<LoganContent oms_version="2.50.2.0.0" name="content_ocid1.tenancy.oc1..aaaaaaaa5s2vdjjrydixjulorcwozffbpna37w5a35p3jhgpyshlkmio6oiq_1650039506307" content_version="2.50.2.0.0" xmlns="http://www.oracle.com/DataCenter/LogAnalyticsStd">
    <Field oms_version="2.50.2.0.0">
        <DisplayName>sensor</DisplayName>
        <FieldType>1</FieldType>
        <IsSystem>0</IsSystem>
        <IsPrimary>1</IsPrimary>
        <DataType>STRING</DataType>
        <IsMetricKeyEligible>0</IsMetricKeyEligible>
        <IsMetricValueEligible>0</IsMetricValueEligible>
        <FacetEligible>1</FacetEligible>
        <RangeFacetEligible>0</RangeFacetEligible>
        <TableEligible>1</TableEligible>
        <FacetPriority>1</FacetPriority>
        <Summarizable>1</Summarizable>
        <HighCardinality>1</HighCardinality>
        <LargeData>0</LargeData>
        <MultiValued>0</MultiValued>
        <SMAEnabledSetting>0</SMAEnabledSetting>
    </Field>
    
    <Tag>
<Name>#medium_severity_sensor</Name>
<DisplayName>Medium Severity Sensor</DisplayName>
<IsSystem>0</IsSystem>
<ProblemPriority>MEDIUM</ProblemPriority>
</Tag>
    <Source name="EBS Sensor: FIN AP PAY HAS INCORRECT ACCTG IF RELATED INVOICE IS FULLY PAID - Weekly" oms_version="2.50.2.0.0" configWarningSettings="0">
    <SourceType>database_sql</SourceType>
    <TargetTypes>
        <TargetType>omc_oracle_db_instance</TargetType>
        <TargetType>omc_oracle_pdb</TargetType>
    </TargetTypes>
    <DisplayName>EBS Sensor: FIN AP PAY HAS INCORRECT ACCTG IF RELATED INVOICE IS FULLY PAID - Weekly</DisplayName>
    <Description><![CDATA[Incorrect accounting for invoice distributions having an AWT distribution of the same amount.]]></Description>
    <IsSystem>0</IsSystem>
    <IsSecureContent>1</IsSecureContent>
    <Patterns>
        <DBPattern dateTimeField="entrytime" dateTimeColumns="entrytime">
        <SQLQuery>
            <![CDATA[select 'ME$EBS_FIN_AP_MU_PAYMENTS_AWT_PRORATION' sensor, to_timestamp(to_char(sysdate, 'YYYY-MM-DD hh24:mi:ss'), 'YYYY-MM-DD hh24:mi:ss') entrytime, 'check_id:' || s.check_id key_data FROM (SELECT      check_id check_id  FROM      (          WITH chks AS (              SELECT /*+ materialize */ DISTINCT                  ph.check_id              FROM                  APPS.ap_payment_history_all ph              WHERE                  ph.accounting_date BETWEEN ( trunc(sysdate) - 7 ) AND ( trunc(sysdate) + 3 )          )  SELECT ac.check_id,            ac.org_id,            ac.check_number,            ac.check_date,            ac.amount,            aip.invoice_id,            aip.accounting_event_id,            aip.invoice_payment_id,            aip.amount,            sum(aphd.amount) total     FROM APPS.ap_invoice_payments_all aip,          APPS.ap_payment_hist_dists aphd,          APPS.ap_payment_history_all aph,          APPS.ap_checks_all ac,          chks     WHERE aip.invoice_payment_id = aphd.invoice_payment_id     AND   aip.accounting_event_id = aphd.accounting_event_id     AND   aip.posted_flag = 'Y'     AND   aphd.pay_dist_lookup_code = 'CASH'     AND   aph.accounting_event_id = aip.accounting_event_id     AND   aph.posted_flag = 'Y'     AND   aph.historical_flag is null     AND   EXISTS (             SELECT 1             FROM APPS.ap_payment_hist_dists hd1,                  APPS.ap_payment_hist_dists hd2             WHERE hd1.invoice_payment_id = aip.invoice_payment_id             AND   hd1.accounting_event_id = aip.accounting_event_id             AND   hd1.pay_dist_lookup_code = 'AWT'             AND   hd1.awt_related_id = hd2.invoice_distribution_id             AND   hd2.invoice_payment_id = aip.invoice_payment_id             AND   hd2.accounting_event_id = aip.accounting_event_id             AND   hd1.payment_hist_dist_id > hd2.payment_hist_dist_id)     AND   aph.check_id = ac.check_id     AND   ac.check_id = chks.check_id     GROUP BY ac.check_id, ac.org_id, ac.check_number, ac.check_date,              ac.amount, aip.invoice_id, aip.accounting_event_id,              aip.invoice_payment_id, aip.amount     HAVING   aip.amount != sum(aphd.amount)                )  WHERE      ROWNUM < 11  ORDER BY      check_id  ) s]]>
        </SQLQuery>
        <IsInclude>1</IsInclude>
            <InUse>1</InUse>
            <DBQueryFieldList>
                <DBPatternSeqField>entrytime</DBPatternSeqField>
                <DBPatternField>
                    <DBQueryColName>sensor</DBQueryColName>
                    <FieldName>udfs1</FieldName>
                </DBPatternField>
                <DBPatternField>
                    <DBQueryColName>entrytime</DBQueryColName>
                    <FieldName>time</FieldName>
                </DBPatternField>
                <DBPatternField>
                                        <DBQueryColName>key_data</DBQueryColName>
                                        <FieldName>probkey</FieldName>
                                   </DBPatternField>
            </DBQueryFieldList>
            <IsSystem>0</IsSystem>
            <IsEnabled>1</IsEnabled>
            </DBPattern>
    </Patterns>
        <TagConditions>
            <TagCondition operator="CONTAINS_REGEX" field="udfs1" alertRuleVisible="0">
                <ConditionValues>
                    <ConditionValue>%</ConditionValue>
                </ConditionValues>
                <ConditionTags tagField="mtag">
                    <ConditionTag>#medium_severity_sensor</ConditionTag>
                </ConditionTags>
                <IsSystem>0</IsSystem>
                <IsEnabled>1</IsEnabled>
            </TagCondition>
        </TagConditions>
        <IsHidden>0</IsHidden>
        <IsSMAEnabled>0</IsSMAEnabled>
    </Source>
    <FieldNameMaps>
        <FieldNameMap>
            <Name>udfs1</Name>
            <DisplayName>sensor</DisplayName>
        </FieldNameMap>
        
    </FieldNameMaps>
</LoganContent>